/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projet_labyrinthe;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author lukha
 */
public class Interface extends javax.swing.JFrame {

    static Toolkit toolkit = Toolkit.getDefaultToolkit();
    static Dimension ScreenDim = toolkit.getScreenSize();
    static int CaseSize = ScreenDim.height / 10;

    String action = "";
    Partie Session;

    CaseGraphique Top1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Top2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Top3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Bottom1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Bottom2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Bottom3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Left1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Left2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Left3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Right1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Right2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Right3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique[] Actions = new CaseGraphique[12];

    /**
     * Creates new form FenetreDeJeu
     */
    public Interface() {
        Actions[0] = Top1;
        Actions[1] = Top2;
        Actions[2] = Top3;
        Actions[3] = Bottom1;
        Actions[4] = Bottom2;
        Actions[5] = Bottom3;
        Actions[6] = Left1;
        Actions[7] = Left2;
        Actions[8] = Left3;
        Actions[9] = Right1;
        Actions[10] = Right2;
        Actions[11] = Right3;
        initComponents();
        Session = new Partie();
        PlaceComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Labyrinth = new javax.swing.JPanel();
        Pane_Info = new javax.swing.JPanel();
        Validate = new javax.swing.JButton();
        Rotate = new javax.swing.JButton();
        btn_Help = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Labyrinth.setBackground(new java.awt.Color(102, 102, 102));
        Labyrinth.setLayout(new java.awt.GridLayout(7, 7));
        getContentPane().add(Labyrinth, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 180, 190));
        Labyrinth.getAccessibleContext().setAccessibleName("");
        Labyrinth.getAccessibleContext().setAccessibleDescription("");

        Pane_Info.setBackground(new java.awt.Color(0, 102, 51));
        Pane_Info.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(Pane_Info, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        Validate.setBackground(new java.awt.Color(0, 153, 0));
        Validate.setText("Valider");
        Validate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidateActionPerformed(evt);
            }
        });
        getContentPane().add(Validate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 440, -1, -1));

        Rotate.setBackground(new java.awt.Color(255, 153, 0));
        Rotate.setText("Tourner");
        Rotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateActionPerformed(evt);
            }
        });
        getContentPane().add(Rotate, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 440, -1, -1));

        btn_Help.setBackground(new java.awt.Color(153, 153, 153));
        btn_Help.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        btn_Help.setForeground(new java.awt.Color(255, 255, 255));
        btn_Help.setText("?");
        btn_Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_HelpActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Help, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlaceComponents() {
        setSize(ScreenDim.width, ScreenDim.height);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        Labyrinth.setBounds(ScreenDim.width / 2, (ScreenDim.height) / 10, (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 7 / 10);
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                CaseGraphique Case = new CaseGraphique(Session.Labyrinth.Grid[i][j]);
                Case.setPreferredSize(new Dimension(ScreenDim.height / 10, ScreenDim.height / 10));
                Labyrinth.add(Case);
            }
        }
        Pane_Info.setBounds(0, 0, (ScreenDim.width) / 3, ScreenDim.height);

        Top1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top1ActionPerformed(evt);
            }
        });
        getContentPane().add(Top1);
        Top1.setBounds((ScreenDim.width) / 2 + ScreenDim.height / 10, 0, ScreenDim.height / 10, ScreenDim.height / 10);

        Top2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top2ActionPerformed(evt);
            }
        });
        getContentPane().add(Top2);
        Top2.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 3 / 10, 0, ScreenDim.height / 10, ScreenDim.height / 10);

        Top3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top3ActionPerformed(evt);
            }
        });
        getContentPane().add(Top3);
        Top3.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 5 / 10, 0, ScreenDim.height / 10, ScreenDim.height / 10);

        Bottom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottom1ActionPerformed(evt);
            }
        });
        getContentPane().add(Bottom1);
        Bottom1.setBounds((ScreenDim.width) / 2 + ScreenDim.height / 10, (ScreenDim.height) * 8 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Bottom2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottom2ActionPerformed(evt);
            }
        });
        getContentPane().add(Bottom2);
        Bottom2.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 3 / 10, (ScreenDim.height) * 8 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Bottom3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottom3ActionPerformed(evt);
            }
        });
        getContentPane().add(Bottom3);
        Bottom3.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 5 / 10, (ScreenDim.height) * 8 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Left1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left1ActionPerformed(evt);
            }
        });
        getContentPane().add(Left1);
        Left1.setBounds((ScreenDim.width) / 2 - (ScreenDim.height) / 10, (ScreenDim.height) * 2 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Left2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left2ActionPerformed(evt);
            }
        });
        getContentPane().add(Left2);
        Left2.setBounds((ScreenDim.width) / 2 - (ScreenDim.height) / 10, (ScreenDim.height) * 4 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Left3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left3ActionPerformed(evt);
            }
        });
        getContentPane().add(Left3);
        Left3.setBounds((ScreenDim.width) / 2 - (ScreenDim.height) / 10, (ScreenDim.height) * 6 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Right1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right1ActionPerformed(evt);
            }
        });
        getContentPane().add(Right1);
        Right1.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 2 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Right2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right2ActionPerformed(evt);
            }
        });
        getContentPane().add(Right2);
        Right2.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 4 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Right3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right3ActionPerformed(evt);
            }
        });
        getContentPane().add(Right3);
        Right3.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 6 / 10, ScreenDim.height / 10, ScreenDim.height / 10);
        Validate.setBounds((ScreenDim.width) * 7 / 20, (ScreenDim.height) * 7 / 9, (ScreenDim.height) * 3 / 40, (ScreenDim.height) * 3 / 40);
        Rotate.setBounds((ScreenDim.width) * 8 / 20, (ScreenDim.height) * 7 / 9, (ScreenDim.height) * 3 / 40, (ScreenDim.height) * 3 / 40);
        btn_Help.setBounds((ScreenDim.width) * 7 / 20, (ScreenDim.height) / 30, (ScreenDim.height) * 3 / 40, (ScreenDim.height) * 3 / 40);

    }

    private void Top1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Top1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Top1";
    }

    private void Top2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Top2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Top2";
    }

    private void Top3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Top3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Top3";
    }

    private void Bottom1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Bottom1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Bottom1";
    }

    private void Bottom2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Bottom2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Bottom2";
    }

    private void Bottom3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Bottom3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Bottom3";
    }

    private void Left1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Left1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Left1";
    }

    private void Left2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Left2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Left2";
    }

    private void Left3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Left3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Left3";
    }

    private void Right1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Right1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Right1";
    }

    private void Right2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Right2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Right2";
    }

    private void Right3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                }
            }
        }
        //Right3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;
        Session.Labyrinth.prochainecase = Right3.CaseGrapheAssocie;
        action = "Right3";

    }
    private void btn_HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_HelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_HelpActionPerformed

    private void RotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RotateActionPerformed

    private void ValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidateActionPerformed
        switch (action) {
            case "Top1" ->
                Session.Labyrinth.DecalerColonne(2, true);
            case "Top2" ->
                Session.Labyrinth.DecalerColonne(4, true);
            case "Top3" ->
                Session.Labyrinth.DecalerColonne(6, true);
            case "Bottom1" ->
                Session.Labyrinth.DecalerColonne(2, false);
            case "Bottom2" ->
                Session.Labyrinth.DecalerColonne(4, false);
            case "Bottom3" ->
                Session.Labyrinth.DecalerColonne(6, false);
            case "Left1" ->
                Session.Labyrinth.DecalerLigne(2, true);
            case "Left2" ->
                Session.Labyrinth.DecalerLigne(4, true);
            case "Left3" ->
                Session.Labyrinth.DecalerLigne(6, true);
            case "Right1" ->
                Session.Labyrinth.DecalerLigne(2, false);
            case "Right2" ->
                Session.Labyrinth.DecalerLigne(4, false);
            case "Right3" -> 
                Session.Labyrinth.DecalerLigne(6, false);
        }
            Component[] components = Labyrinth.getComponents();
            for (int index=0;index<components.length;index++){
                int i=index/7;
                int j=index%7;
                Component comp=components[index];
                if (comp instanceof CaseGraphique) {
                    CaseGraphique caseGraphique = (CaseGraphique) comp;
                    caseGraphique.CaseGrapheAssocie = Session.Labyrinth.Grid[i][j];
                }
            }
        Labyrinth.repaint();
    }//GEN-LAST:event_ValidateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Labyrinth;
    private javax.swing.JPanel Pane_Info;
    private javax.swing.JButton Rotate;
    private javax.swing.JButton Validate;
    private javax.swing.JButton btn_Help;
    // End of variables declaration//GEN-END:variables
}
