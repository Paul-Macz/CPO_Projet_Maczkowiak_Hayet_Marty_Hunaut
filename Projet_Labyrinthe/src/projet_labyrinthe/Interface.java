/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projet_labyrinthe;

import java.util.Arrays;
import java.util.Comparator;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @authors Owen HAYET, Raphael MARTY, Oscar HUNAUT, Paul MACZKOWIAK
 */
public class Interface extends javax.swing.JFrame {

    static Toolkit toolkit = Toolkit.getDefaultToolkit();
    static Dimension ScreenDim = toolkit.getScreenSize();
    static int CaseSize = ScreenDim.height / 10;
    static int CardSize = ScreenDim.height / 7;

    String action = "";
    Partie Session;

    boolean deplacement = false, placement = false;

    /**
     * Creates new form FenetreDeJeu
     *
     * @param nb Nombre de Joueur
     * @param NOM1 Nom du joueur1
     * @param NOM2 Nom du joueur2
     * @param NOM3 Nom du joueur3
     * @param NOM4 Nom du joueur4
     */
    public Interface(int nb, String NOM1, String NOM2, String NOM3, String NOM4) {
        initComponents();
        if (nb == 1) {
            Session = new Partie(1);
            Session.creerJoueur(0, NOM1);
            Session.InitialiserPartie();
        } else if (nb == 2) {
            Session = new Partie(2);
            Session.creerJoueur(0, NOM1);
            Session.creerJoueur(1, NOM2);
            Session.InitialiserPartie();
        } else if (nb == 3) {
            Session = new Partie(3);
            Session.creerJoueur(0, NOM1);
            Session.creerJoueur(1, NOM2);
            Session.creerJoueur(2, NOM3);
            Session.InitialiserPartie();
        } else if (nb == 4) {
            Session = new Partie(4);
            Session.creerJoueur(0, NOM1);
            Session.creerJoueur(1, NOM2);
            Session.creerJoueur(2, NOM3);
            Session.creerJoueur(3, NOM4);
            Session.InitialiserPartie();
        }

        Initialisation();
    }

    private void Initialisation() {
        Actions[0] = Top1;
        Actions[1] = Top2;
        Actions[2] = Top3;
        Actions[3] = Bottom1;
        Actions[4] = Bottom2;
        Actions[5] = Bottom3;
        Actions[6] = Left1;
        Actions[7] = Left2;
        Actions[8] = Left3;
        Actions[9] = Right1;
        Actions[10] = Right2;
        Actions[11] = Right3;
        Chrono_Jeu = new Chrono_Partie(Pane_Info);
        Chrono_Tour = new Chrono_Partie(Pane_Info);
        Chrono_Players = new Chrono(Pane_Info);

        //Chrono_Jeu.;
        PlaceComponents();

        repaint();
        placement = true;
        ActualiserText();
        Chrono_Jeu.Start();
        Chrono_Tour.Start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame_End = new javax.swing.JFrame();
        Pane_Winner = new javax.swing.JPanel();
        lbl_winner = new javax.swing.JLabel();
        lbl_Win = new javax.swing.JLabel();
        Pane_Ranking = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        lbl_forth = new javax.swing.JLabel();
        lbl_First1 = new javax.swing.JLabel();
        lbl_deuxieme = new javax.swing.JLabel();
        lbl_third = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        lbl_nom = new javax.swing.JLabel();
        lbl_Win1 = new javax.swing.JLabel();
        lbl_Win2 = new javax.swing.JLabel();
        lbl_Win3 = new javax.swing.JLabel();
        lbl_Win4 = new javax.swing.JLabel();
        lbl_Win4_objet = new javax.swing.JLabel();
        lbl_Win1_objet = new javax.swing.JLabel();
        lbl_Win2_objet = new javax.swing.JLabel();
        lbl_Win3_objet = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jFrame_Rules = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btn_openInfoSup = new javax.swing.JButton();
        btn_closeRules = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jFrame_Info = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btn_closeInfoSup = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        Labyrinth = new javax.swing.JPanel();
        Pane_Info = new javax.swing.JPanel();
        lbl_NomJoueur = new javax.swing.JLabel();
        lbl_JoueurCourant = new javax.swing.JLabel();
        lbl_ChronoJeu = new javax.swing.JLabel();
        lbl_ChronoTour = new javax.swing.JLabel();
        lbl_nextCase = new javax.swing.JLabel();
        lbl_nextCard = new javax.swing.JLabel();
        lbl_nomJ1 = new javax.swing.JLabel();
        lbl_J1 = new javax.swing.JLabel();
        lbl_nomJ2 = new javax.swing.JLabel();
        lbl_J2 = new javax.swing.JLabel();
        lbl_J3 = new javax.swing.JLabel();
        lbl_nomJ3 = new javax.swing.JLabel();
        lbl_nomJ4 = new javax.swing.JLabel();
        lbl_J4 = new javax.swing.JLabel();
        Pane_J1 = new javax.swing.JPanel();
        lbl_Objet_J1 = new javax.swing.JLabel();
        lbl_txtChronoJ1 = new javax.swing.JLabel();
        lbl_txtObjetJ1 = new javax.swing.JLabel();
        Pane_J2 = new javax.swing.JPanel();
        lbl_Objet_J2 = new javax.swing.JLabel();
        lbl_txtChronoJ2 = new javax.swing.JLabel();
        lbl_txtObjetJ2 = new javax.swing.JLabel();
        Pane_J3 = new javax.swing.JPanel();
        lbl_Objet_J3 = new javax.swing.JLabel();
        lbl_txtChronoJ3 = new javax.swing.JLabel();
        lbl_txtObjetJ3 = new javax.swing.JLabel();
        Pane_J4 = new javax.swing.JPanel();
        lbl_Objet_J4 = new javax.swing.JLabel();
        lbl_txtChronoJ4 = new javax.swing.JLabel();
        lbl_txtObjetJ4 = new javax.swing.JLabel();
        Validate = new javax.swing.JButton();
        Rotate = new javax.swing.JButton();
        btn_Help = new javax.swing.JButton();

        jFrame_End.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Pane_Winner.setBackground(new java.awt.Color(0, 0, 102));
        Pane_Winner.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_winner.setFont(new java.awt.Font("OCR A Extended", 1, 36)); // NOI18N
        lbl_winner.setForeground(new java.awt.Color(255, 204, 102));
        lbl_winner.setText("jLabel10");
        Pane_Winner.add(lbl_winner, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, -1, -1));

        lbl_Win.setFont(new java.awt.Font("OCR A Extended", 1, 36)); // NOI18N
        lbl_Win.setForeground(new java.awt.Color(255, 204, 102));
        lbl_Win.setText("VAINQUEUR:");
        Pane_Winner.add(lbl_Win, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 240, -1));

        jFrame_End.getContentPane().add(Pane_Winner, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 480, 120));

        Pane_Ranking.setBackground(new java.awt.Color(102, 102, 102));
        Pane_Ranking.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("OCR A Extended", 1, 24)); // NOI18N
        jLabel10.setText("CLASSEMENT");
        Pane_Ranking.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));

        lbl_forth.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_forth.setText("Quatrième");
        Pane_Ranking.add(lbl_forth, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        lbl_First1.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_First1.setText("Premier");
        Pane_Ranking.add(lbl_First1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        lbl_deuxieme.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_deuxieme.setText("Deuxième");
        Pane_Ranking.add(lbl_deuxieme, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        lbl_third.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_third.setText("Troisième");
        Pane_Ranking.add(lbl_third, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        Pane_Ranking.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 410, 10));

        jSeparator3.setForeground(new java.awt.Color(51, 51, 51));
        Pane_Ranking.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 410, 10));

        jSeparator4.setForeground(new java.awt.Color(51, 51, 51));
        Pane_Ranking.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 410, 10));

        jSeparator5.setForeground(new java.awt.Color(51, 51, 51));
        Pane_Ranking.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 410, 10));

        jSeparator6.setForeground(new java.awt.Color(255, 255, 255));
        Pane_Ranking.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 410, 10));

        lbl_nom.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_nom.setText("NOM");
        Pane_Ranking.add(lbl_nom, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, -1, -1));

        lbl_Win1.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win1.setText("jLabel17");
        Pane_Ranking.add(lbl_Win1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        lbl_Win2.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win2.setText("jLabel17");
        Pane_Ranking.add(lbl_Win2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, -1, -1));

        lbl_Win3.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win3.setText("jLabel17");
        Pane_Ranking.add(lbl_Win3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, -1, -1));

        lbl_Win4.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win4.setText("jLabel18");
        Pane_Ranking.add(lbl_Win4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, -1, -1));

        lbl_Win4_objet.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win4_objet.setText("jLabel17");
        Pane_Ranking.add(lbl_Win4_objet, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 260, -1, -1));

        lbl_Win1_objet.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win1_objet.setText("jLabel17");
        Pane_Ranking.add(lbl_Win1_objet, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, -1, -1));

        lbl_Win2_objet.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win2_objet.setText("jLabel17");
        Pane_Ranking.add(lbl_Win2_objet, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, -1, -1));

        lbl_Win3_objet.setFont(new java.awt.Font("OCR A Extended", 1, 12)); // NOI18N
        lbl_Win3_objet.setText("jLabel17");
        Pane_Ranking.add(lbl_Win3_objet, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, -1, -1));

        jLabel15.setFont(new java.awt.Font("OCR A Extended", 1, 16)); // NOI18N
        jLabel15.setText("<html>NOMBRE D'OBJETS RAMASSES");
        Pane_Ranking.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 180, 50));

        jFrame_End.getContentPane().add(Pane_Ranking, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 240, 410, 290));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Jeux Pixel.gif"))); // NOI18N
        jFrame_End.getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1220, 770));

        jFrame_Rules.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Georgia", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 102, 255));
        jLabel1.setText("Règles du jeu :");
        jFrame_Rules.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, -1));

        jLabel3.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("<html>- BONNE CHANCE A VOUS ET QUE LE MEILLEUR GAGNE !!");
        jFrame_Rules.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 970, 40));

        jLabel4.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("<html>- Le jeu est un tour par tour. Le tour d'un joueur est alors affecté par la couleur de l'écran à votre gauche.  A présent il est temps de commencer.");
        jFrame_Rules.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 970, 40));

        jLabel5.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("<html>- Le but du jeu et de tous les joueurs sur le plateau est alors d'essayer d'atteindre les objets qui leur sont attribués par les cartes au fur et à mesure . Le premier à avoir parcouru le chemin et réunit les objets qui lui sont attribués est le grand vainqueur. Comment se déroule la partie ?");
        jFrame_Rules.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 970, 60));

        jLabel6.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("<html>- Tout d'abord, à chaque tour, vous recevez une carte chemin que vous pouvez placer à votre guise sur les différents chemins bleus du plateau. Ces cartes sont ensuite placées sur le chemin de votre choix. À vous de leur donner une orientation grâce à la case rotation en orange en bas à gauche du plateau. Maintenant, il vous suffit de valider votre choix avec la case de validation verte, juste à côté de la case rotation. Le plateau est alors modifié, sortant la carte qui est au bout du chemin choisi. Leur placement est une histoire de stratégie, pouvant tout autant vous servir que desservir vos adversaires. À vous de voir.");
        jFrame_Rules.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 970, 100));

        jLabel7.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("<html>- Après avoir mis votre carte chemin sur le plateau, à vous de vous déplacer. Vous ne pouvez vous déplacer que de case en case et uniquement d'une case par tour. Donc, choisissez le chemin optimal pour que vous puissiez arriver à votre objectif le plus rapidement possible ! Le temps compte !");
        jFrame_Rules.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 970, 60));

        jLabel8.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("<html>- C'est ensuite donc au tour des autres joueurs d'effectuer leur tour et ainsi de suite. Maintenant après avoir traversé le labyrinthe est être arrivé devant votre objet, pour le ramasser il vous suffit donc de vous déplacer sur la case et le tour est joué.");
        jFrame_Rules.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 970, 30));

        jLabel9.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("<html>- Maintenant à vous de jouer en effectuant ces mêmes taches et en respectant les règles afin d'être le premier à réunir les 6 objets et gagner la partie.");
        jFrame_Rules.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 970, 40));

        btn_openInfoSup.setBackground(new java.awt.Color(204, 204, 0));
        btn_openInfoSup.setFont(new java.awt.Font("Lucida Console", 1, 18)); // NOI18N
        btn_openInfoSup.setForeground(new java.awt.Color(0, 0, 0));
        btn_openInfoSup.setText("Informations Supplémentaires");
        btn_openInfoSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openInfoSupActionPerformed(evt);
            }
        });
        jFrame_Rules.getContentPane().add(btn_openInfoSup, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, 370, 60));

        btn_closeRules.setBackground(new java.awt.Color(153, 0, 0));
        btn_closeRules.setFont(new java.awt.Font("Lucida Console", 1, 36)); // NOI18N
        btn_closeRules.setForeground(new java.awt.Color(0, 0, 0));
        btn_closeRules.setText("Fermer");
        btn_closeRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeRulesActionPerformed(evt);
            }
        });
        jFrame_Rules.getContentPane().add(btn_closeRules, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 380, 200, 70));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/taverne grand.gif"))); // NOI18N
        jFrame_Rules.getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 470));

        jFrame_Info.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Georgia", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 102, 255));
        jLabel2.setText("Informations complémentaires :");
        jFrame_Info.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 420, -1));

        jLabel11.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("<html>- L'objet qui est ramassé pour chaque joueur est situé sur la page de gauche sur la carte objet à ramasser. Les objets à ramasser sont aléatoires pour chaque joueur. Les objets sont attribués une seule et unique fois à un seul des joueurs donc deux joueurs ne peuvent pas avoir le même objet.");
        jFrame_Info.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 970, 50));

        jLabel12.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("<html>- La page de gauche change de couleur selon le joueur qui joue. Cette page actualise aussi les données affectées à chaque joueur l'objet à ramasser ou encore la carte chemin qu'il peut placer.");
        jFrame_Info.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 970, 50));

        jLabel13.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("<html>-Lorsque vous vous déplacer de case en case cela est uniquement possible si vous continuez sur le chemin que les cartes vous tracent. Si vous êtes en face d'un mur vous serez bloqué de tous déplacement dans cette direction. Vos déplacements sont limités à des déplacements haut, bas, gauche, droite, vous ne pouvez pas vous déplacer diagonalement. Vous pouvez vous déplacer d'autant de cases possibles du moment où un chemin le permet.");
        jFrame_Info.getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 960, 80));

        jLabel14.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("<html>-Le nombre d'objet à ramasser varie selon le nombre de joueur, pour un total de 24 objets à ramasser. Ce nombre se retrouve dans le panneau d'information de chaque joueur en bas à droite.");
        jFrame_Info.getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 970, 40));

        btn_closeInfoSup.setBackground(new java.awt.Color(153, 0, 0));
        btn_closeInfoSup.setFont(new java.awt.Font("OCR A Extended", 1, 36)); // NOI18N
        btn_closeInfoSup.setText("Fermer");
        btn_closeInfoSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeInfoSupActionPerformed(evt);
            }
        });
        jFrame_Info.getContentPane().add(btn_closeInfoSup, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 360, 180, 40));

        jLabel16.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("<html>- Vous pouvez tout à fait être bloqué mais pas de panique pour poursuivre le tour il vous suffit de cliquer sur la case ou vous êtes si vous ne pouvez pas vous déplacer. Ensuite si vous êtes situé sur le bout d'un des chemins d'insertion de carte et que vous êtes alors éjecter du plateau ne vous inquiétez pas votre joueur va alors se retrouver de l'autre côté de ce même chemin.");
        jFrame_Info.getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 970, 70));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/warrior grand.gif"))); // NOI18N
        jFrame_Info.getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 440));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Labyrinth.setBackground(new java.awt.Color(102, 102, 102));
        Labyrinth.setLayout(new java.awt.GridLayout(7, 7));
        getContentPane().add(Labyrinth, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 180, 190));
        Labyrinth.getAccessibleContext().setAccessibleName("");
        Labyrinth.getAccessibleContext().setAccessibleDescription("");

        Pane_Info.setBackground(new java.awt.Color(0, 102, 51));
        Pane_Info.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_NomJoueur.setFont(new java.awt.Font("OCR A Extended", 3, 18)); // NOI18N
        lbl_NomJoueur.setText("jLabel1");
        Pane_Info.add(lbl_NomJoueur, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lbl_JoueurCourant.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_JoueurCourant.setText("Tour de");
        Pane_Info.add(lbl_JoueurCourant, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lbl_ChronoJeu.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_ChronoJeu.setText("Chrono de la Partie");
        Pane_Info.add(lbl_ChronoJeu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lbl_ChronoTour.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_ChronoTour.setText("Chrono du Tour");
        Pane_Info.add(lbl_ChronoTour, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        lbl_nextCase.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_nextCase.setText("Prochaine Case");
        Pane_Info.add(lbl_nextCase, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lbl_nextCard.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lbl_nextCard.setText("Objet a Ramasser");
        Pane_Info.add(lbl_nextCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lbl_nomJ1.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        lbl_nomJ1.setText("name");
        Pane_Info.add(lbl_nomJ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        lbl_J1.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_J1.setText("Joueur 1");
        Pane_Info.add(lbl_J1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        lbl_nomJ2.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        lbl_nomJ2.setText("name");
        Pane_Info.add(lbl_nomJ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        lbl_J2.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_J2.setText("Joueur 2");
        Pane_Info.add(lbl_J2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        lbl_J3.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_J3.setText("Joueur 3");
        Pane_Info.add(lbl_J3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        lbl_nomJ3.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        lbl_nomJ3.setText("name");
        Pane_Info.add(lbl_nomJ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        lbl_nomJ4.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        lbl_nomJ4.setText("name");
        Pane_Info.add(lbl_nomJ4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        lbl_J4.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_J4.setText("Joueur 4");
        Pane_Info.add(lbl_J4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        Pane_J1.setBackground(new java.awt.Color(0, 102, 153));
        Pane_J1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_Objet_J1.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        lbl_Objet_J1.setText("jLabel1");
        Pane_J1.add(lbl_Objet_J1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, -1));

        lbl_txtChronoJ1.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtChronoJ1.setText("Temps");
        Pane_J1.add(lbl_txtChronoJ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        lbl_txtObjetJ1.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtObjetJ1.setText("Nb d'objets restants");
        Pane_J1.add(lbl_txtObjetJ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        Pane_Info.add(Pane_J1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 280, 60));

        Pane_J2.setBackground(new java.awt.Color(0, 153, 51));
        Pane_J2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_Objet_J2.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        lbl_Objet_J2.setText("jLabel1");
        Pane_J2.add(lbl_Objet_J2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, -1));

        lbl_txtChronoJ2.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtChronoJ2.setText("Temps");
        Pane_J2.add(lbl_txtChronoJ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        lbl_txtObjetJ2.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtObjetJ2.setText("Nb d'objets restants");
        Pane_J2.add(lbl_txtObjetJ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        Pane_Info.add(Pane_J2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 280, 60));

        Pane_J3.setBackground(new java.awt.Color(153, 0, 0));
        Pane_J3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_Objet_J3.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        lbl_Objet_J3.setText("jLabel1");
        Pane_J3.add(lbl_Objet_J3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, -1));

        lbl_txtChronoJ3.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtChronoJ3.setText("Temps");
        Pane_J3.add(lbl_txtChronoJ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        lbl_txtObjetJ3.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtObjetJ3.setText("Nb d'objets restants");
        Pane_J3.add(lbl_txtObjetJ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        Pane_Info.add(Pane_J3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 280, 60));

        Pane_J4.setBackground(new java.awt.Color(200, 200, 0));
        Pane_J4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_Objet_J4.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        lbl_Objet_J4.setText("jLabel1");
        Pane_J4.add(lbl_Objet_J4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, -1));

        lbl_txtChronoJ4.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtChronoJ4.setText("Temps");
        Pane_J4.add(lbl_txtChronoJ4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        lbl_txtObjetJ4.setFont(new java.awt.Font("OCR A Extended", 0, 14)); // NOI18N
        lbl_txtObjetJ4.setText("Nb d'objets restants");
        Pane_J4.add(lbl_txtObjetJ4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        Pane_Info.add(Pane_J4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 280, 60));

        getContentPane().add(Pane_Info, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 250));

        Validate.setBackground(new java.awt.Color(0, 153, 0));
        Validate.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        Validate.setText("✔");
        Validate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidateActionPerformed(evt);
            }
        });
        getContentPane().add(Validate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 432, -1, -1));

        Rotate.setBackground(new java.awt.Color(255, 153, 0));
        Rotate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Rotate.setForeground(new java.awt.Color(255, 255, 255));
        Rotate.setText("⤾");
        Rotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateActionPerformed(evt);
            }
        });
        getContentPane().add(Rotate, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 440, -1, -1));

        btn_Help.setBackground(new java.awt.Color(153, 153, 153));
        btn_Help.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        btn_Help.setForeground(new java.awt.Color(255, 255, 255));
        btn_Help.setText("?");
        btn_Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_HelpActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Help, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlaceComponents() {
        //Creation de la grille
        setSize(ScreenDim.width, ScreenDim.height);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        jFrame_End.setVisible(false);

        //Creation de la grille
        PlaceGrid();

        //Creation des boutons
        PlaceBtn();

        //Création du panneau d'information
        PlacePane_Info();
        DuSON.setVisible(false);
        playSound("src/Music/otherside.wav");
    }

    /**
     * Place les elements de la grille
     */
    public void PlaceGrid() {
        Labyrinth.setBounds(ScreenDim.width / 2, (ScreenDim.height) / 10, (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 7 / 10);
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                CaseGraphique Case = CaseGraphique.createInstance(Session.Labyrinth.Grid[i][j], i, j);
                Case.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        casegraphselectionnee = (CaseGraphique) e.getSource();
                        caseselectionnee = casegraphselectionnee.CaseGrapheAssocie;
                        if (deplacement) {
                            int[] posPionJCourant = Session.Labyrinth.positionPion(Session.listeJoueurs[Session.joueurCourant]);
                            if (posPionJCourant != null) {
                                if (Session.Labyrinth.PathFinding(posPionJCourant[0], posPionJCourant[1], Case.posX, Case.posY, null)) {
                                    Peon pionActuel = Session.listeJoueurs[Session.joueurCourant].marqueur;
                                    Session.Labyrinth.Grid[posPionJCourant[0]][posPionJCourant[1]].Players.remove(pionActuel);
                                    Session.Labyrinth.Grid[Case.posX][Case.posY].Players.add(pionActuel);
                                    pionActuel.associe.nouvellePosition(Case.CaseGrapheAssocie);
                                    Labyrinth.repaint();
                                    /* Si le joueur a fini, on termine la partie */
                                    if (pionActuel.associe.tousObjetsRamasses()) {
                                        partieTerminee(pionActuel.associe);
                                    } else {
                                        deplacement = false;
                                        placement = true;
                                        ActualiserText();
                                        Chrono_Players.stop(Session.joueurCourant);
                                        Session.joueurSuivant();
                                        ActualiserText();
                                    }
                                } else {
                                    System.out.println("Case actuelle:" + Session.Labyrinth.Grid[posPionJCourant[0]][posPionJCourant[1]]);
                                    System.out.println("Case inaccessible:" + Session.Labyrinth.Grid[Case.posX][Case.posY]);
                                }
                            }
                        }
                    }
                });
                Case.setPreferredSize(new Dimension(ScreenDim.height / 10, ScreenDim.height / 10));
                Labyrinth.add(Case);
            }
        }
    }

    /**
     * Place les boutons
     */
    public void PlaceBtn() {
        //Creation des boutons d'actions de la grille
        Top1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top1ActionPerformed(evt);
            }
        });
        getContentPane().add(Top1);
        Top1.setBounds((ScreenDim.width) / 2 + ScreenDim.height / 10, 0, ScreenDim.height / 10, ScreenDim.height / 10);

        Top2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top2ActionPerformed(evt);
            }
        });
        getContentPane().add(Top2);
        Top2.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 3 / 10, 0, ScreenDim.height / 10, ScreenDim.height / 10);

        Top3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top3ActionPerformed(evt);
            }
        });
        getContentPane().add(Top3);
        Top3.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 5 / 10, 0, ScreenDim.height / 10, ScreenDim.height / 10);

        Bottom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottom1ActionPerformed(evt);
            }
        });
        getContentPane().add(Bottom1);
        Bottom1.setBounds((ScreenDim.width) / 2 + ScreenDim.height / 10, (ScreenDim.height) * 8 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Bottom2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottom2ActionPerformed(evt);
            }
        });
        getContentPane().add(Bottom2);
        Bottom2.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 3 / 10, (ScreenDim.height) * 8 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Bottom3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottom3ActionPerformed(evt);
            }
        });
        getContentPane().add(Bottom3);
        Bottom3.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 5 / 10, (ScreenDim.height) * 8 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Left1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left1ActionPerformed(evt);
            }
        });
        getContentPane().add(Left1);
        Left1.setBounds((ScreenDim.width) / 2 - (ScreenDim.height) / 10, (ScreenDim.height) * 2 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Left2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left2ActionPerformed(evt);
            }
        });
        getContentPane().add(Left2);
        Left2.setBounds((ScreenDim.width) / 2 - (ScreenDim.height) / 10, (ScreenDim.height) * 4 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Left3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left3ActionPerformed(evt);
            }
        });
        getContentPane().add(Left3);
        Left3.setBounds((ScreenDim.width) / 2 - (ScreenDim.height) / 10, (ScreenDim.height) * 6 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Right1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right1ActionPerformed(evt);
            }
        });
        getContentPane().add(Right1);
        Right1.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 2 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Right2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right2ActionPerformed(evt);
            }
        });
        getContentPane().add(Right2);
        Right2.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 4 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        Right3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right3ActionPerformed(evt);
            }
        });
        getContentPane().add(Right3);
        Right3.setBounds((ScreenDim.width) / 2 + (ScreenDim.height) * 7 / 10, (ScreenDim.height) * 6 / 10, ScreenDim.height / 10, ScreenDim.height / 10);

        //Creation autres boutons d'actions
        Validate.setBounds((ScreenDim.width) * 7 / 20, (ScreenDim.height) * 7 / 9, (ScreenDim.height) * 3 / 40, (ScreenDim.height) * 3 / 40);
        Validate.setText("<html>&#10003;<html>");
        Validate.setFont(new Font("Arial Unicode MS", Font.BOLD, 18));
        Validate.setForeground(Color.white);
        Rotate.setBounds((ScreenDim.width) * 8 / 20, (ScreenDim.height) * 7 / 9, (ScreenDim.height) * 3 / 40, (ScreenDim.height) * 3 / 40);
        Rotate.setText("<html>&#10558;<html>");
        Rotate.setFont(new Font("Arial Unicode MS", Font.BOLD, 24));
        Rotate.setForeground(Color.white);
        btn_Help.setBounds((ScreenDim.width) * 7 / 20, (ScreenDim.height) / 30, (ScreenDim.height) * 3 / 40, (ScreenDim.height) * 3 / 40);

        DuSON = new javax.swing.JButton();
        PasDuSON = new javax.swing.JButton();
        DuSON.setBackground(new java.awt.Color(51, 0, 102));
        DuSON.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/du-son.png"))); // NOI18N
        DuSON.setVisible(false);
        DuSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuSONActionPerformed(evt);
            }
        });
        getContentPane().add(DuSON, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, 60, 50));
        DuSON.setBounds((ScreenDim.width) * 42 / 100, (ScreenDim.height) / 100, 60, 50);
        PasDuSON.setBackground(new java.awt.Color(51, 0, 102));
        PasDuSON.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/pas-de-son.png"))); // NOI18N
        PasDuSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasDuSONActionPerformed(evt);
            }
        });
        getContentPane().add(PasDuSON, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 50, 50));
        PasDuSON.setBounds(((ScreenDim.width) * 42 / 100) + 60, (ScreenDim.height) / 100, 60, 50);
        PasDuSON.setVisible(true);

    }

    private void PasDuSONActionPerformed(java.awt.event.ActionEvent evt) {
        // Stop the music
        stopSound();
        DuSON.setVisible(true);
        PasDuSON.setVisible(false);
    }

    private void DuSONActionPerformed(java.awt.event.ActionEvent evt) {
        // Play the music
        playSound("src/Music/otherside.wav");  // Replace with the actual path to your music file
        PasDuSON.setVisible(true);
        DuSON.setVisible(false);
    }

// Method to play the sound
    private void playSound(String filePath) {
        try {
            File file = new File(filePath);
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(file);
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        } catch (IOException | LineUnavailableException | UnsupportedAudioFileException e) {
            e.printStackTrace();
        }
    }

// Method to stop the sound
    private void stopSound() {
        if (clip != null && clip.isRunning()) {
            clip.stop();
            clip.close();
        }
    }

    /**
     * Place le panneau information et ses elements
     */
    public void PlacePane_Info() {
        Pane_Info.setBounds(0, 0, (ScreenDim.width) / 3, ScreenDim.height);

        Pane_Info.add(lbl_ChronoJeu, new AbsoluteConstraints((ScreenDim.width) * 1 / 100, (ScreenDim.height) * 8 / 100, lbl_ChronoJeu.getWidth(), lbl_ChronoJeu.getHeight()));
        Pane_Info.add(lbl_ChronoTour, new AbsoluteConstraints((ScreenDim.width) * 1 / 100, (ScreenDim.height) * 16 / 100, lbl_ChronoTour.getWidth(), lbl_ChronoTour.getHeight()));
        Pane_Info.add(Chrono_Tour.Chrono_Partie, new AbsoluteConstraints((ScreenDim.width) * 15 / 100, (ScreenDim.height) * 16 / 100, 150, 34));

        Pane_Info.add(lbl_JoueurCourant, new AbsoluteConstraints((ScreenDim.width) * 10 / 100, (ScreenDim.height) / 100, lbl_JoueurCourant.getWidth(), lbl_JoueurCourant.getHeight()));
        Pane_Info.add(lbl_NomJoueur, new AbsoluteConstraints((ScreenDim.width) * 17 / 100, (ScreenDim.height) / 100, lbl_NomJoueur.getWidth(), lbl_NomJoueur.getHeight()));

        ObjetaRamasser = new CarteGraphique(new Cartes("araignee"));
        Pane_Info.add(ObjetaRamasser, new AbsoluteConstraints((ScreenDim.width) * 3 / 100, (ScreenDim.height) * 23 / 100, (ScreenDim.width) / 8, (ScreenDim.height) / 4));
        Pane_Info.add(lbl_nextCard, new AbsoluteConstraints((ScreenDim.width) * 1 / 100, (ScreenDim.height) * 45 / 100, lbl_nextCard.getWidth(), lbl_nextCard.getHeight()));

        int temp = Partie.rand.nextInt(Partie.ListeCases.size());
        Session.Labyrinth.prochainecase = new Case(Partie.ListeCases.get(temp).object);
        Session.Labyrinth.prochainecase.Haut = Partie.ListeCases.get(temp).Haut;
        Session.Labyrinth.prochainecase.Bas = Partie.ListeCases.get(temp).Bas;
        Session.Labyrinth.prochainecase.Gauche = Partie.ListeCases.get(temp).Gauche;
        Session.Labyrinth.prochainecase.Droite = Partie.ListeCases.get(temp).Droite;
        ProchaineCase = new CaseGraphique(new Case(Session.Labyrinth.prochainecase.object));

        ProchaineCase.setScale(1.3);
        Pane_Info.add(ProchaineCase, new AbsoluteConstraints((ScreenDim.width) * 20 / 100, (ScreenDim.height) * 31 / 100, (ScreenDim.height) * 13 / 100, (ScreenDim.height) * 13 / 100));
        Pane_Info.add(lbl_nextCase, new AbsoluteConstraints((ScreenDim.width) * 18 / 100, (ScreenDim.height) * 45 / 100, lbl_nextCase.getWidth(), lbl_nextCase.getHeight()));

        Pane_Info.add(lbl_J1, new AbsoluteConstraints((ScreenDim.width) * 4 / 100, (ScreenDim.height) * 51 / 100));
        lbl_nomJ1.setText(Session.listeJoueurs[0].nom);
        Pane_Info.add(lbl_nomJ1, new AbsoluteConstraints((ScreenDim.width) * 5 / 100, (ScreenDim.height) * 54 / 100));
        Pane_Info.add(Pane_J1, new AbsoluteConstraints((ScreenDim.width) / 9, (ScreenDim.height) / 2, (Pane_Info.getWidth()) * 6 / 10, Pane_J1.getHeight()));
        lbl_Objet_J1.setText((Session.listeJoueurs[0].listeCartes.length - Session.listeJoueurs[0].indexCarteRetournee) + "/" + Session.listeJoueurs[0].listeCartes.length);

        Chrono_Players.Chrono_J1.setOpaque(false);
        Chrono_Players.Chrono_J2.setOpaque(false);
        Chrono_Players.Chrono_J3.setOpaque(false);
        Chrono_Players.Chrono_J4.setOpaque(false);
        lbl_J2.setVisible(false);
        lbl_nomJ2.setVisible(false);
        Pane_J2.setVisible(false);
        lbl_J3.setVisible(false);
        lbl_nomJ3.setVisible(false);
        Pane_J3.setVisible(false);
        lbl_J4.setVisible(false);
        lbl_nomJ4.setVisible(false);
        Pane_J4.setVisible(false);
        Chrono_Players.Chrono_J2.setVisible(false);
        Chrono_Players.Chrono_J3.setVisible(false);
        Chrono_Players.Chrono_J4.setVisible(false);

        if (Session.listeJoueurs.length > 1) {
            lbl_J2.setVisible(true);
            lbl_nomJ2.setVisible(true);
            Pane_J2.setVisible(true);
            Chrono_Players.Chrono_J2.setVisible(true);
            Pane_Info.add(lbl_J2, new AbsoluteConstraints((ScreenDim.width) * 4 / 100, (ScreenDim.height) * 61 / 100));
            lbl_nomJ2.setText(Session.listeJoueurs[1].nom);
            Pane_Info.add(lbl_nomJ2, new AbsoluteConstraints((ScreenDim.width) * 5 / 100, (ScreenDim.height) * 64 / 100));
            Pane_Info.add(Pane_J2, new AbsoluteConstraints((ScreenDim.width) / 9, (ScreenDim.height) * 12 / 20, (Pane_Info.getWidth()) * 6 / 10, Pane_J1.getHeight()));
            lbl_Objet_J2.setText((Session.listeJoueurs[1].listeCartes.length - Session.listeJoueurs[1].indexCarteRetournee) + "/" + (Session.listeJoueurs[1].listeCartes.length));

        }

        if (Session.listeJoueurs.length > 2) {
            lbl_J3.setVisible(true);
            lbl_nomJ3.setVisible(true);
            Pane_J3.setVisible(true);
            Chrono_Players.Chrono_J3.setVisible(true);
            Pane_Info.add(lbl_J3, new AbsoluteConstraints((ScreenDim.width) * 4 / 100, (ScreenDim.height) * 71 / 100));
            lbl_nomJ3.setText(Session.listeJoueurs[2].nom);
            Pane_Info.add(lbl_nomJ3, new AbsoluteConstraints((ScreenDim.width) * 5 / 100, (ScreenDim.height) * 74 / 100));
            Pane_Info.add(Pane_J3, new AbsoluteConstraints((ScreenDim.width) / 9, (ScreenDim.height) * 14 / 20, (Pane_Info.getWidth()) * 6 / 10, Pane_J1.getHeight()));
            lbl_Objet_J3.setText((Session.listeJoueurs[2].listeCartes.length - Session.listeJoueurs[2].indexCarteRetournee) + "/" + Session.listeJoueurs[2].listeCartes.length);
        }

        if (Session.listeJoueurs.length == 4) {
            lbl_J4.setVisible(true);
            lbl_nomJ4.setVisible(true);
            Pane_J4.setVisible(true);
            Chrono_Players.Chrono_J4.setVisible(true);
            Pane_Info.add(lbl_J4, new AbsoluteConstraints((ScreenDim.width) * 4 / 100, (ScreenDim.height) * 81 / 100));
            lbl_nomJ4.setText(Session.listeJoueurs[3].nom);
            Pane_Info.add(lbl_nomJ4, new AbsoluteConstraints((ScreenDim.width) * 5 / 100, (ScreenDim.height) * 84 / 100));
            Pane_Info.add(Pane_J4, new AbsoluteConstraints((ScreenDim.width) / 9, (ScreenDim.height) * 16 / 20, (Pane_Info.getWidth()) * 6 / 10, Pane_J1.getHeight()));
            lbl_Objet_J4.setText((Session.listeJoueurs[3].listeCartes.length - Session.listeJoueurs[3].indexCarteRetournee) + "/" + Session.listeJoueurs[3].listeCartes.length);
        }
    }

    public void SwitchCase() {
        if (action != "") {
            for (int i = 0; i < Actions.length; i++) {
                if (Actions[i].CaseGrapheAssocie == Session.Labyrinth.prochainecase) {
                    Actions[i].CaseGrapheAssocie = new Case("placeHolder");
                    Actions[i].repaint();
                }
            }
        }
    }

    public void ActualiserText() {
        Player joueurCourant = Session.listeJoueurs[Session.joueurCourant];
        Chrono_Players.start(Session.joueurCourant);
        Chrono_Tour.Reset();

//		actualiserTuilesGraphiques();
//		panneauGrille.repaint();
//		panel_tuilevolante.repaint();
        lbl_NomJoueur.setText(joueurCourant.nom);
        JLabel lblObjetmodifie = lbl_Objet_J1;
        switch (Session.joueurCourant) {
            case 0:
                Pane_Info.setBackground(new java.awt.Color(77, 132, 187));
                lblObjetmodifie = lbl_Objet_J1;
                break;

            case 1:
                Pane_Info.setBackground(new java.awt.Color(58, 171, 83));
                lblObjetmodifie = lbl_Objet_J2;
                break;

            case 2:
                Pane_Info.setBackground(new java.awt.Color(207, 23, 23));
                lblObjetmodifie = lbl_Objet_J3;
                break;

            case 3:
                Pane_Info.setBackground(new java.awt.Color(252, 210, 29));
                lblObjetmodifie = lbl_Objet_J4;
                break;
        }

        ObjetaRamasser.setCarteAssociee(new Cartes(joueurCourant.listeCartes[joueurCourant.indexCarteRetournee].nomObjet));
        int objReste = joueurCourant.listeCartes.length - joueurCourant.indexCarteRetournee;

        switch (objReste) {
            case 1:
                lblObjetmodifie.setText("C'est le dernier !");
                break;
            default:
                lblObjetmodifie.setText(objReste + "/" + joueurCourant.listeCartes.length);
                break;
        }
    }

    private void Top1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Top1;
            Top1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Top1";
        }
    }

    private void Top2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Top2;
            Top2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Top2";
        }
    }

    private void Top3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Top3;
            Top3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Top3";
        }
    }

    private void Bottom1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Bottom1;
            Bottom1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Bottom1";
        }
    }

    private void Bottom2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Bottom2;
            Bottom2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Bottom2";
        }
    }

    private void Bottom3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Bottom3;
            Bottom3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Bottom3";
        }
    }

    private void Left1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Left1;
            Left1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Left1";
        }
    }

    private void Left2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Left2;
            Left2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Left2";
        }
    }

    private void Left3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Left3;
            Left3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Left3";
        }
    }

    private void Right1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Right1;
            Right1.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Right1";
        }
    }

    private void Right2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Right2;
            Right2.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Right2";
        }
    }

    private void Right3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (placement) {
            SwitchCase();
            boutonselectionne = Right3;
            Right3.CaseGrapheAssocie = Session.Labyrinth.prochainecase;

            action = "Right3";
        }
    }

    private void btn_HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_HelpActionPerformed
        // TODO add your handling code here:
        jFrame_Rules.setVisible(true);
        jFrame_Info.pack();
        jFrame_Rules.pack();
    }//GEN-LAST:event_btn_HelpActionPerformed

    private void RotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateActionPerformed
        // TODO add your handling code here:
        if (placement) {
            if (boutonselectionne == null) {
                return;
            }
            boutonselectionne.CaseGrapheAssocie.TurnCase(90);
            boutonselectionne.repaint();
        }
    }//GEN-LAST:event_RotateActionPerformed

    private void ValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidateActionPerformed
        if (placement) {

            switch (action) {
                case "Top1" ->
                    Session.Labyrinth.DecalerColonne(2, true);
                case "Top2" ->
                    Session.Labyrinth.DecalerColonne(4, true);
                case "Top3" ->
                    Session.Labyrinth.DecalerColonne(6, true);
                case "Bottom1" ->
                    Session.Labyrinth.DecalerColonne(2, false);
                case "Bottom2" ->
                    Session.Labyrinth.DecalerColonne(4, false);
                case "Bottom3" ->
                    Session.Labyrinth.DecalerColonne(6, false);
                case "Left1" ->
                    Session.Labyrinth.DecalerLigne(2, true);
                case "Left2" ->
                    Session.Labyrinth.DecalerLigne(4, true);
                case "Left3" ->
                    Session.Labyrinth.DecalerLigne(6, true);
                case "Right1" ->
                    Session.Labyrinth.DecalerLigne(2, false);
                case "Right2" ->
                    Session.Labyrinth.DecalerLigne(4, false);
                case "Right3" ->
                    Session.Labyrinth.DecalerLigne(6, false);
                default -> {
                    return;
                }
            }

            SwitchCase();
            Component[] components = Labyrinth.getComponents();
            for (int index = 0; index < components.length; index++) {
                int i = index / 7;
                int j = index % 7;
                Component comp = components[index];
                if (comp instanceof CaseGraphique) {
                    CaseGraphique caseGraphique = (CaseGraphique) comp;
                    caseGraphique.CaseGrapheAssocie = Session.Labyrinth.Grid[i][j];
                }
            }

            Labyrinth.repaint();
            CasePlacee();
            if (Session.Labyrinth.prochainecase.presenceObjet()) {
                Partie.ListeCases.removeIf(element -> element.object.equals(Session.Labyrinth.prochainecase.object));
            }

            int temp = Partie.rand.nextInt(Partie.ListeCases.size());
            Session.Labyrinth.prochainecase = new Case(Partie.ListeCases.get(temp).object);
            Session.Labyrinth.prochainecase.Haut = Partie.ListeCases.get(temp).Haut;
            Session.Labyrinth.prochainecase.Bas = Partie.ListeCases.get(temp).Bas;
            Session.Labyrinth.prochainecase.Gauche = Partie.ListeCases.get(temp).Gauche;
            Session.Labyrinth.prochainecase.Droite = Partie.ListeCases.get(temp).Droite;
            ProchaineCase.CaseGrapheAssocie = new Case(Session.Labyrinth.prochainecase.object);
            ProchaineCase.repaint();
            int[] posPionJCourant = Session.Labyrinth.positionPion(Session.listeJoueurs[Session.joueurCourant]);
            if (Session.Labyrinth.CasesAccessibles(posPionJCourant[0], posPionJCourant[1]).isEmpty()) {
                deplacement = false;
                placement = true;
                Chrono_Players.stop(Session.joueurCourant);
                Session.joueurSuivant();
                ActualiserText();
            }
        }
    }//GEN-LAST:event_ValidateActionPerformed

    private void btn_closeInfoSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeInfoSupActionPerformed
        // TODO add your handling code here:
        jFrame_Info.setVisible(false);
    }//GEN-LAST:event_btn_closeInfoSupActionPerformed

    private void btn_closeRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeRulesActionPerformed
        // TODO add your handling code here:
        jFrame_Rules.setVisible(false);
        jFrame_Info.setVisible(false);
    }//GEN-LAST:event_btn_closeRulesActionPerformed

    private void btn_openInfoSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openInfoSupActionPerformed
        // TODO add your handling code here:
        jFrame_Info.setVisible(true);
    }//GEN-LAST:event_btn_openInfoSupActionPerformed

    public void CasePlacee() {
        placement = false;
        deplacement = true;
    }

    /**
     * Termine la partie, quand un joueur a gagné
     *
     * @param joueurGagnant Le joueur qui a gagné
     */
    public void partieTerminee(Player joueurGagnant) {
        stopSound();
        placement = false;
        deplacement = false;
        System.out.println("Bravo");
        Chrono_Jeu.Stop();
        Chrono_Players.stop(Session.joueurCourant);
        getContentPane().setVisible(false);
        lbl_winner.setText(joueurGagnant.nom);
        //jFrame_End.add(Chrono_Jeu.Chrono_Partie, new AbsoluteConstraints(lbl_time.getX() + 200, lbl_time.getY(), Chrono_Jeu.Chrono_Partie.getWidth(), Chrono_Jeu.Chrono_Partie.getHeight()));
        //Chrono_Jeu.Chrono_Partie.setBounds(lbl_time.getX() + 200, lbl_time.getY(), Chrono_Jeu.Chrono_Partie.getWidth(), Chrono_Jeu.Chrono_Partie.getHeight());
        
        Player[] copiedArray = Arrays.copyOf(Session.listeJoueurs, Session.listeJoueurs.length);
        sortByIndexCarteRetournee(Session.listeJoueurs);

        lbl_Win1.setText(Session.listeJoueurs[0].nom);
        lbl_Win1_objet.setText(Session.listeJoueurs[0].indexCarteRetournee + "");

        jSeparator3.setVisible(false);
        lbl_deuxieme.setVisible(false);
        lbl_Win2.setVisible(false);
        lbl_Win2_objet.setVisible(false);
        jSeparator4.setVisible(false);
        lbl_third.setVisible(false);
        lbl_Win3.setVisible(false);
        lbl_Win3_objet.setVisible(false);
        jSeparator5.setVisible(false);
        lbl_forth.setVisible(false);
        lbl_Win4.setVisible(false);
        lbl_Win4_objet.setVisible(false);
        Pane_Ranking.setVisible(false);
//        int index = -1;
//        for (int i = 0; i < Session.listeJoueurs.length; i++) {
//            if (Session.listeJoueurs[i] == copiedArray[0]) {
//                index = i;
//            }
//        }
//        switch (index) {
//            case 0:
//                Pane_Ranking.add(Chrono_Players.Chrono_J1, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                Chrono_Players.Chrono_J1.setBounds(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//                break;
//            case 1:
//                Pane_Ranking.add(Chrono_Players.Chrono_J2, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                Chrono_Players.Chrono_J2.setBounds(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                break;
//            case 2:
//                Pane_Ranking.add(Chrono_Players.Chrono_J3, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                Chrono_Players.Chrono_J3.setBounds(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                break;
//            case 3:
//                Pane_Ranking.add(Chrono_Players.Chrono_J4, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                Chrono_Players.Chrono_J4.setBounds(jLabel16.getX(), jLabel16.getY() + 50, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                break;
//        }

        if (Session.listeJoueurs.length > 1) {
            Pane_Ranking.setVisible(true);
            jSeparator3.setVisible(true);
            lbl_deuxieme.setVisible(true);
            lbl_Win2.setText(Session.listeJoueurs[1].nom);
            lbl_deuxieme.setVisible(true);
            lbl_Win2.setVisible(true);
            lbl_Win2_objet.setVisible(true);
            lbl_Win2_objet.setText(Session.listeJoueurs[1].indexCarteRetournee + "");

//            for (int i = 0; i < Session.listeJoueurs.length; i++) {
//                if (Session.listeJoueurs[i] == copiedArray[1]) {
//                    index = i;
//                }
//            }
//            switch (index) {
//                case 0:
//                    Pane_Ranking.add(Chrono_Players.Chrono_J1, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                    Chrono_Players.Chrono_J1.setBounds(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                    break;
//                case 1:
//                    Pane_Ranking.add(Chrono_Players.Chrono_J2, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                    Chrono_Players.Chrono_J2.setBounds(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                    break;
//                case 2:
//                    Pane_Ranking.add(Chrono_Players.Chrono_J3, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                    Chrono_Players.Chrono_J3.setBounds(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                    break;
//                case 3:
//                    Pane_Ranking.add(Chrono_Players.Chrono_J4, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                    Chrono_Players.Chrono_J4.setBounds(jLabel16.getX(), jLabel16.getY() + 100, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                    break;
//            }

            if (Session.listeJoueurs.length > 2) {
                jSeparator4.setVisible(true);
                lbl_third.setVisible(true);
                lbl_Win3.setText(Session.listeJoueurs[2].nom);
                lbl_Win3.setVisible(true);
                lbl_Win3_objet.setVisible(true);
                lbl_Win3_objet.setText(Session.listeJoueurs[2].indexCarteRetournee + "");

//                for (int i = 0; i < Session.listeJoueurs.length; i++) {
//                    if (Session.listeJoueurs[i] == copiedArray[2]) {
//                        index = i;
//                    }
//                }
//                switch (index) {
//                    case 0:
//                        Pane_Ranking.add(Chrono_Players.Chrono_J1, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                        Chrono_Players.Chrono_J1.setBounds(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                        break;
//                    case 1:
//                        Pane_Ranking.add(Chrono_Players.Chrono_J2, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                        Chrono_Players.Chrono_J2.setBounds(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                        break;
//                    case 2:
//                        Pane_Ranking.add(Chrono_Players.Chrono_J3, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                        Chrono_Players.Chrono_J3.setBounds(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                        break;
//                    case 3:
//                        Pane_Ranking.add(Chrono_Players.Chrono_J4, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                        Chrono_Players.Chrono_J4.setBounds(jLabel16.getX(), jLabel16.getY() + 150, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                        break;
//                }

                if (Session.listeJoueurs.length == 4) {
                    jSeparator5.setVisible(true);
                    lbl_forth.setVisible(true);
                    lbl_Win4.setText(Session.listeJoueurs[3].nom);
                    lbl_Win4.setVisible(true);
                    lbl_Win4_objet.setVisible(true);
                    lbl_Win4_objet.setText(Session.listeJoueurs[3].indexCarteRetournee + "");

//                    for (int i = 0; i < Session.listeJoueurs.length; i++) {
//                        if (Session.listeJoueurs[i] == copiedArray[3]) {
//                            index = i;
//                        }
//                    }
//                    switch (index) {
//                        case 0:
//                            Pane_Ranking.add(Chrono_Players.Chrono_J1, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                            Chrono_Players.Chrono_J1.setBounds(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                            break;
//                        case 1:
//                            Pane_Ranking.add(Chrono_Players.Chrono_J2, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                            Chrono_Players.Chrono_J2.setBounds(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                            break;
//                        case 2:
//                            Pane_Ranking.add(Chrono_Players.Chrono_J3, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                            Chrono_Players.Chrono_J3.setBounds(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                            break;
//                        case 3:
//                            Pane_Ranking.add(Chrono_Players.Chrono_J4, new AbsoluteConstraints(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight()));
//                            Chrono_Players.Chrono_J4.setBounds(jLabel16.getX(), jLabel16.getY() + 200, Chrono_Players.Chrono_J1.getWidth(), Chrono_Players.Chrono_J1.getHeight());
//
//                            break;
//                    }
                }
            }
        }
        jFrame_End.setSize(ScreenDim.width, ScreenDim.height);
        jFrame_End.setExtendedState(JFrame.MAXIMIZED_BOTH);
        jFrame_End.setVisible(true);
        playSound("src/Music/Stage Win (Super Mario) - Sound Effect HD.wav");
    }

    static void sortByIndexCarteRetournee(Player[] array) {
        Arrays.sort(array, Comparator.comparingInt(Player::getIndexCarteRetournee).reversed());
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Interface().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Labyrinth;
    private javax.swing.JPanel Pane_Info;
    private javax.swing.JPanel Pane_J1;
    private javax.swing.JPanel Pane_J2;
    private javax.swing.JPanel Pane_J3;
    private javax.swing.JPanel Pane_J4;
    private javax.swing.JPanel Pane_Ranking;
    private javax.swing.JPanel Pane_Winner;
    private javax.swing.JButton Rotate;
    private javax.swing.JButton Validate;
    private javax.swing.JButton btn_Help;
    private javax.swing.JButton btn_closeInfoSup;
    private javax.swing.JButton btn_closeRules;
    private javax.swing.JButton btn_openInfoSup;
    private javax.swing.JFrame jFrame_End;
    private javax.swing.JFrame jFrame_Info;
    private javax.swing.JFrame jFrame_Rules;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lbl_ChronoJeu;
    private javax.swing.JLabel lbl_ChronoTour;
    private javax.swing.JLabel lbl_First1;
    private javax.swing.JLabel lbl_J1;
    private javax.swing.JLabel lbl_J2;
    private javax.swing.JLabel lbl_J3;
    private javax.swing.JLabel lbl_J4;
    private javax.swing.JLabel lbl_JoueurCourant;
    private javax.swing.JLabel lbl_NomJoueur;
    private javax.swing.JLabel lbl_Objet_J1;
    private javax.swing.JLabel lbl_Objet_J2;
    private javax.swing.JLabel lbl_Objet_J3;
    private javax.swing.JLabel lbl_Objet_J4;
    private javax.swing.JLabel lbl_Win;
    private javax.swing.JLabel lbl_Win1;
    private javax.swing.JLabel lbl_Win1_objet;
    private javax.swing.JLabel lbl_Win2;
    private javax.swing.JLabel lbl_Win2_objet;
    private javax.swing.JLabel lbl_Win3;
    private javax.swing.JLabel lbl_Win3_objet;
    private javax.swing.JLabel lbl_Win4;
    private javax.swing.JLabel lbl_Win4_objet;
    private javax.swing.JLabel lbl_deuxieme;
    private javax.swing.JLabel lbl_forth;
    private javax.swing.JLabel lbl_nextCard;
    private javax.swing.JLabel lbl_nextCase;
    private javax.swing.JLabel lbl_nom;
    private javax.swing.JLabel lbl_nomJ1;
    private javax.swing.JLabel lbl_nomJ2;
    private javax.swing.JLabel lbl_nomJ3;
    private javax.swing.JLabel lbl_nomJ4;
    private javax.swing.JLabel lbl_third;
    private javax.swing.JLabel lbl_txtChronoJ1;
    private javax.swing.JLabel lbl_txtChronoJ2;
    private javax.swing.JLabel lbl_txtChronoJ3;
    private javax.swing.JLabel lbl_txtChronoJ4;
    private javax.swing.JLabel lbl_txtObjetJ1;
    private javax.swing.JLabel lbl_txtObjetJ2;
    private javax.swing.JLabel lbl_txtObjetJ3;
    private javax.swing.JLabel lbl_txtObjetJ4;
    private javax.swing.JLabel lbl_winner;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JButton DuSON;
    private javax.swing.JButton PasDuSON;
    Case caseselectionnee;
    CaseGraphique casegraphselectionnee;
    CaseGraphique boutonselectionne;
    private Clip clip;  // Declare Clip as a class member
    CaseGraphique Top1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Top2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Top3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Bottom1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Bottom2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Bottom3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Left1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Left2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Left3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Right1 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Right2 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique Right3 = new CaseGraphique(new Case("placeHolder"));
    CaseGraphique[] Actions = new CaseGraphique[12];
    CarteGraphique ObjetaRamasser;
    CaseGraphique ProchaineCase;
    Chrono Chrono_Players;
    Chrono_Partie Chrono_Jeu, Chrono_Tour;
}
